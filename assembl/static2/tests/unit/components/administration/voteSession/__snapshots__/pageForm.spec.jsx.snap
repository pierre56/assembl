// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Vote Session DumbPageForm component should render a form to update the vote session page data 1`] = `
<div
  className="admin-box"
>
  <SectionTitle
    annotation="* Fields are required."
    title="Page configuration"
  />
  <div
    className="intro-text"
  >
    <Translate
      className="bold"
      value="administration.voteModulesIntroText1"
    />
    <div
      className="inline"
    >
      <Translate
        value="administration.voteModulesIntroText2"
      />
      <Link
        className="timeline-link"
        onlyActiveOnIndex={false}
        style={Object {}}
        target="_blank"
        to="/debate/\${slug}/timeline"
      >
        <Translate
          value="administration.timeline"
        />
      </Link>
      .
    </div>
  </div>
  <div
    className="admin-content"
  >
    <div
      className="form-container"
    >
      <form>
        <Helper
          additionalTextClasses=""
          classname="title"
          helperText="The top page header must contain an image and a title. The subtitle is optional."
          helperUrl="/static2/img/helpers/helper1.png"
          label="Top page Header configuration"
          popOverClass=""
        />
        <FormControlWithLabel
          helperText=""
          helperUrl=""
          label="Thematic title FR"
          labelAlwaysVisible={false}
          onChange={[MockFunction]}
          required={true}
          type="text"
          value="Phase de vote a la majorite et estimation multicritere"
        />
        <FormControlWithLabel
          helperText=""
          helperUrl=""
          label="Top banner subtitle FR"
          labelAlwaysVisible={false}
          onChange={[MockFunction]}
          required={false}
          type="text"
          value="La phase de vote est ouverte !"
        />
        <FormGroup
          bsClass="form-group"
        >
          <label
            htmlFor="header-image"
          >
            <Translate
              value="administration.voteSessionHeaderLabel"
            />
             *
          </label>
          <FileUploader
            deleteFileTooltip={
              <Tooltip
                bsClass="tooltip"
                id="deleteFileTooltip"
                placement="right"
              >
                <Translate
                  value="administration.deleteAssociatedFile"
                />
              </Tooltip>
            }
            fileOrUrl="http://www.example.com/documents/myimage/data"
            filename=""
            handleChange={[MockFunction]}
            imgTitle={null}
            isAdminUploader={false}
            mimeType="image/jpeg"
            name="header-image"
            withPreview={true}
          />
          <Translate
            className="file-uploader-warning"
            value="administration.imageRequirements"
          />
        </FormGroup>
      </form>
      <div
        className="separator"
      />
      <Helper
        additionalTextClasses=""
        classname="title"
        helperText="The instructions section must contain a title and a description that will guide the participants for their contribution."
        helperUrl="/static2/img/helpers/helper2.jpg"
        label="Instructions section configuration"
        popOverClass=""
      />
      <FormControlWithLabel
        helperText=""
        helperUrl=""
        label="Section title FR"
        labelAlwaysVisible={false}
        onChange={[MockFunction]}
        required={true}
        type="text"
        value="Votez pour elire les 3 meilleures proppositions et leur alouer une estimation de cout!"
      />
      <FormControlWithLabel
        helperText=""
        helperUrl=""
        label="Instructions FR"
        labelAlwaysVisible={false}
        onChange={[MockFunction]}
        required={true}
        type="rich-text"
        value={
          Object {
            "blocks": Array [
              Object {
                "data": Object {},
                "depth": 0,
                "entityRanges": Array [],
                "inlineStyleRanges": Array [],
                "key": "",
                "text": "Vous disposez de 8 jetons favorables et de 3 jetons dÃ©favorables",
                "type": "unstyled",
              },
            ],
            "entityMap": Object {},
          }
        }
      />
      <div
        className="separator"
      />
      <Helper
        additionalTextClasses=""
        classname="title"
        helperText="The proposals section is introduced by a title. You define the title based on the proposal content."
        helperUrl="/static2/img/helpers/helper3.png"
        label="Proposal section title configuration"
        popOverClass=""
      />
      <FormControlWithLabel
        helperText=""
        helperUrl=""
        label="Section title FR"
        labelAlwaysVisible={false}
        onChange={[MockFunction]}
        required={true}
        type="text"
        value="Vote sur 8 propositions"
      />
    </div>
  </div>
</div>
`;
